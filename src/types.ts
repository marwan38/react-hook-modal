/* eslint-disable @typescript-eslint/interface-name-prefix */
import React from 'react';

export interface IModalProps {
  /** Closes the modal. Passed down by the provider */
  close: () => void;
  /** Unique key generated by the context. Used to fetch state from within the modal */
  stateKey: string;
}

export interface IModalActions<P, S> {
  open: (props?: Partial<P>) => void;
  close: () => void;
  setState: (callback: (draftState: S) => void) => void;
  updateProps: (props: P) => void;
  cleanUp: () => void;
  init: () => void;
}

export interface IModalContext<P, S> {
  /** Adds a modal component into the Modal Context */
  add: (
    stateKey: string,
    modal: React.FC<any>,
    props?: Omit<P, 'close' | 'stateKey'>,
    state?: S
  ) => IModalActions<Omit<P, 'close' | 'stateKey'>, S>;
  modalsState: { [key: string]: S | any };
}

export interface IModalProviderProps {
  children: React.ReactNode;
  /** The portals root element */
  rootElement?: Element;
}
